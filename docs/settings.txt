========
Settings
========

The following settings will change the behaviour of your Django project to
utilise ``demail`` for email delivery.

.. contents::
    :local:
    :depth: 1

.. setting:: EMAIL_BACKEND

EMAIL_BACKEND
-------------

Default: ``'django.core.mail.backends.smtp.EmailBackend'``

This is a standard Django setting. It must be set to have Django register
``demail`` as the default mail backend. Example::

    EMAIL_BACKEND = 'demail.backends.EmailBackend'


.. setting:: DEMAIL_BACKEND

DEMAIL_BACKEND
--------------

Default: ``'django.core.mail.backends.console.EmailBackend'``

Must be set to the backend you wish ``demail`` to hand control over to once
the rewriting rules have been applied. Example::

    DEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'


.. setting:: DEMAIL_CALLBACK

DEMAIL_CALLBACK
---------------

Default: ``'demail.utils.rewrite_recipient_address'``

Path to a callable which will rewrite the recipient email addresses
with whatever custom logic you like. Example::

    DEMAIL_CALLBACK = 'myapp.demail_callback'

If writing your own function it must accept a single positional argument
which is the unprocessed email address, returning a valid email address.
Example::

    def demail_callback(addr):
        return 'user@example.com'


.. setting:: DEMAIL_ALLOWED_RECIPIENTS

DEMAIL_ALLOWED_RECIPIENTS
-------------------------

Default: ``()`` (Empty tuple)

A tuple of white-listed recipient email addresses. Any email address in
this list will never be transformed. Example::

    DEMAIL_ALLOWED_RECIPIENTS = (
        'user@example.com',
    )


.. setting:: DEMAIL_ALLOWED_DOMAINS

DEMAIL_ALLOWED_DOMAINS
----------------------

Default: ``()`` (Empty tuple)

A tuple of white-listed recipient email domains. Any email address in the
list that belongs in this domain will never be transformed. Example::

    DEMAIL_ALLOWED_DOMAINS = (
        'example.com',
        'foobar.com',
    )
